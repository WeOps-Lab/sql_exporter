pipeline {
    agent {
        node('chaos')
    }

    parameters {
       string(name: 'BranchName', defaultValue: 'dev', description: null)
       string(name: 'GitTag', defaultValue: 'dev', description: null)
       string(name: 'BuildPath', defaultValue: 'weops/pipe-tools/bin', description: 'The path to build binaries')
    }

    environment {
       PATH = "/data/go/bin:${env.PATH}"
    }

    stages {
        stage('拉取代码') {
            steps {
                git url: 'https://proxy.zyun.vip/https://github.com/WeOps-Lab/sql_exporter', branch: "weops/mssql/${env.BranchName}"
            }
        }

        stage('重新部署监控对象') {
            steps {
                dir('weops/pipe-tools/charts') {
                    sh 'bash helm_uninstall.sh'
                    sleep 3
                    sh 'bash helm_install.sh'
                }
            }
        }

        stage('创建监控账户'){
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'chaos', namespace: '', serverUrl: 'https://10.10.90.113:6443') {
                    dir('weops/pipe-tools/exporter') {
                        sh 'kubectl replace --force -f ./account.yml -n mssql'
                    }
                }
            }
        }

        stage('编译探针'){
            steps {
                script {
                    def buildOptions = [
                        "linux-amd64": "GOOS=linux GOARCH=amd64",
                        "windows-amd64": "GOOS=windows GOARCH=amd64",
                        "linux-arm64": "GOOS=linux GOARCH=arm64"
                    ]
                    parallel buildOptions.collectEntries { arch, options ->
                        [(arch): {
                            if (arch == "linux-amd64" || arch == "windows-amd64") {
                                sh "make build GOPROXY=https://goproxy.cn ${options} PREFIX=${env.BuildPath}"
                            } else if (arch == "linux-arm64") {
                                sh "make build GOPROXY=https://goproxy.cn ${options} PREFIX=${env.BuildPath}/${arch}"
                                sh "cp ${env.BuildPath}/${arch}/sql_exporter ${env.BuildPath}/sql_exporter_arm64"
                            }
                        }]
                    }
                }
            }
        }

        stage('构建镜像') {
            steps {
                dir("${env.BuildPath}") {
                    sh 'docker build --no-cache -f ../docker/Dockerfile -t registry-svc:25000/library/mssql-exporter:latest .'
                }
            }
        }

        stage('推送镜像') {
            steps {
                sh 'docker push registry-svc:25000/library/mssql-exporter:latest'
            }
        }

        stage('生成部署文件') {
            steps {
                dir('weops/pipe-tools/exporter/template') {
                    sh 'bash build.sh'
                    sh 'cp mssql_standard.collector.yml ../../bin'
                    sh 'cp sql_exporter.yml ../../bin'
                }
            }
        }

        stage('部署探针和混沌工程') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'chaos', namespace: '', serverUrl: 'https://10.10.90.113:6443') {
                    dir('weops/pipe-tools/exporter') {
                        sh 'kubectl replace --force -f ./mssql_collector_configMap.yml -n mssql'
                        sh 'kubectl replace --force -f ./standalone -n mssql'
                    }
                    dir('weops/pipe-tools/chaos') {
                        sh 'kubectl apply -f ./ -n mssql'
                    }
                }
            }
        }

        stage('上传探针制品') {
            steps {
                dir("${env.BuildPath}") {
                    sh "tar -cvzf mssql_exporter_${env.GitTag}.tar.gz sql_exporter sql_exporter.exe sql_exporter_arm64 mssql_standard.collector.yml sql_exporter.yml"
                    minio bucket: "release", credentialsId: "minio", excludes: "", host: "http://10.10.25.66:9000/", includes: "mssql_exporter_${env.GitTag}.tar.gz", targetFolder: "monitor_plugin/mssql/binary"
                }
            }
        }
    }
}

