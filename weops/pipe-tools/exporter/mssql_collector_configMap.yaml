apiVersion: v1
kind: ConfigMap
metadata:
  name: mssql-collector
  namespace: mssql
data:
  sql_config_2022.yaml: |-
    # Global defaults.
    global:
      # Subtracted from Prometheus' scrape_timeout to give us some headroom and prevent Prometheus from timing out first.
      scrape_timeout_offset: 500ms
      # Minimum interval between collector runs: by default (0s) collectors are executed on every scrape.
      min_interval: 0s
      # Maximum number of open connections to any one target. Metric queries will run concurrently on multiple connections,
      # as will concurrent scrapes.
      max_connections: 3
      # Maximum number of idle connections to any one target. Unless you use very long collection intervals, this should
      # always be the same as max_connections.
      max_idle_connections: 3
      # Maximum number of maximum amount of time a connection may be reused. Expired connections may be closed lazily before reuse.
      # If 0, connections are not closed due to a connection's age.
      max_connection_lifetime: 5m

    # The target to monitor and the collectors to execute on it.
    target:
      # Data source name always has a URI schema that matches the driver name. In some cases (e.g. MySQL)
      # the schema gets dropped or replaced to match the driver expected DSN format.
      data_source_name: 'sqlserver://SA:Weops123!@mssqlserver-2022.mssql:1433'
      collectors: [mssql_*]

    # Collector files specifies a list of globs. One collector definition is read from each matching file.
    # Glob patterns are supported (see <https://pkg.go.dev/path/filepath#Match> for syntax).
    collector_files:
      - "/collector/*.collector.yaml"

  sql_config_2019.yaml: |-
    # Global defaults.
    global:
      # Subtracted from Prometheus' scrape_timeout to give us some headroom and prevent Prometheus from timing out first.
      scrape_timeout_offset: 500ms
      # Minimum interval between collector runs: by default (0s) collectors are executed on every scrape.
      min_interval: 0s
      # Maximum number of open connections to any one target. Metric queries will run concurrently on multiple connections,
      # as will concurrent scrapes.
      max_connections: 3
      # Maximum number of idle connections to any one target. Unless you use very long collection intervals, this should
      # always be the same as max_connections.
      max_idle_connections: 3
      # Maximum number of maximum amount of time a connection may be reused. Expired connections may be closed lazily before reuse.
      # If 0, connections are not closed due to a connection's age.
      max_connection_lifetime: 5m

    # The target to monitor and the collectors to execute on it.
    target:
      # Data source name always has a URI schema that matches the driver name. In some cases (e.g. MySQL)
      # the schema gets dropped or replaced to match the driver expected DSN format.
      data_source_name: 'sqlserver://SA:Weops123!@mssqlserver-2019.mssql:1433'
      collectors: [mssql_*]

    # Collector files specifies a list of globs. One collector definition is read from each matching file.
    # Glob patterns are supported (see <https://pkg.go.dev/path/filepath#Match> for syntax).
    collector_files:
      - "/collector/*.collector.yaml"

  sql_config_2017.yaml: |-
    # Global defaults.
    global:
      # Subtracted from Prometheus' scrape_timeout to give us some headroom and prevent Prometheus from timing out first.
      scrape_timeout_offset: 500ms
      # Minimum interval between collector runs: by default (0s) collectors are executed on every scrape.
      min_interval: 0s
      # Maximum number of open connections to any one target. Metric queries will run concurrently on multiple connections,
      # as will concurrent scrapes.
      max_connections: 3
      # Maximum number of idle connections to any one target. Unless you use very long collection intervals, this should
      # always be the same as max_connections.
      max_idle_connections: 3
      # Maximum number of maximum amount of time a connection may be reused. Expired connections may be closed lazily before reuse.
      # If 0, connections are not closed due to a connection's age.
      max_connection_lifetime: 5m

    # The target to monitor and the collectors to execute on it.
    target:
      # Data source name always has a URI schema that matches the driver name. In some cases (e.g. MySQL)
      # the schema gets dropped or replaced to match the driver expected DSN format.
      data_source_name: 'sqlserver://SA:Weops123!@mssql-2017-mssql-linux.mssql:1433'
      collectors: [mssql_*]

    # Collector files specifies a list of globs. One collector definition is read from each matching file.
    # Glob patterns are supported (see <https://pkg.go.dev/path/filepath#Match> for syntax).
    collector_files:
      - "/collector/*.collector.yaml"

  mssql.collector.yaml: |-
    # A collector defining standard metrics for Microsoft SQL Server.
    #
    # It is required that the SQL Server user has the following permissions:
    #
    #   GRANT VIEW ANY DEFINITION TO
    #   GRANT VIEW SERVER STATE TO
    #
    collector_name: mssql_standard

    # Similar to global.min_interval, but applies to the queries defined by this collector only.
    #min_interval: 0s

    metrics:
      #
      # dev
      #
      - metric_name: mssql_sql_timeout
        type: gauge
        help: 'sql timeout.'
        values: [up]
        query: |
          SELECT 1 AS up WAITFOR DELAY '00:00:10'

      #
      # prometheus-mssql-exporter
      #
      - metric_name: mssql_up
        type: gauge
        help: 'Fetched status of instance.'
        values: [up]
        query: |
          SELECT 1 AS up

      - metric_name: mssql_version
        type: gauge
        help: 'Fetched version of instance.'
        key_labels:
          - ProductVersion
        values: [value]
        query: |
          SELECT CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) AS ProductVersion, 1 AS value

      - metric_name: mssql_client_connections
        type: gauge
        help: 'Number of active client connections.'
        key_labels:
          - db
          - host
        values:
          - count
        query: |
          SELECT host_name AS host, DB_NAME(dbid) AS db, COUNT(*) AS count
          FROM sys.dm_exec_sessions a
          LEFT JOIN sysprocesses b on a.session_id=b.spid
          WHERE is_user_process=1
          GROUP BY host_name, dbid

      - metric_name: mssql_database_state
        type: gauge
        help: 'Databases states: 0=ONLINE 1=RESTORING 2=RECOVERING 3=RECOVERY_PENDING 4=SUSPECT 5=EMERGENCY 6=OFFLINE 7=COPYING 10=OFFLINE_SECONDARY.'
        key_labels:
          - name
        values:
          - state
        query: |
          SELECT name, state FROM master.sys.databases

      - metric_name: mssql_database_filesize
        type: gauge
        help: 'Physical sizes of files used by database in KB, their names and types (0=rows, 1=log, 2=filestream,3=n/a 4=fulltext(before v2008 of MSSQL)).'
        key_labels:
          - db
          - logical_name
          - type
          - physical_name
        values:
          - size_kb
        query: |
          SELECT DB_NAME(database_id) AS db, name AS logical_name, type, physical_name, (size * CAST(8 AS BIGINT)) size_kb FROM sys.master_files


      # mssql_buffer_manager
      - metric_name: mssql_page_reads_sec
        type: counter
        help: 'Page reads/sec.'
        values: [page_reads_sec]
        query_ref: mssql_buffer_manager
      - metric_name: mssql_page_write_sec
        type: counter
        help: 'Page writes/sec.'
        values: [page_writes_sec]
        query_ref: mssql_buffer_manager
      - metric_name: mssql_page_life_expectancy
        type: gauge
        help: 'Indicates the minimum number of seconds a page will stay in the buffer pool on this node without references. The traditional advice from Microsoft used to be that the PLE should remain above 300 seconds.'
        values: [page_life_expectancy]
        query_ref: mssql_buffer_manager
      - metric_name: mssql_lazy_write_sec
        type: counter
        help: 'Lazy writes/sec.'
        values: [lazy_writes_sec]
        query_ref: mssql_buffer_manager
      - metric_name: mssql_checkpoint_pages_sec
        type: counter
        help: 'Checkpoint pages/sec.'
        values: [checkpoint_pages_sec]
        query_ref: mssql_buffer_manager

      - metric_name: mssql_transactions
        type: gauge
        help: 'Number of transactions started for the database per second. Transactions/sec does not count XTP-only transactions (transactions started by a natively compiled stored procedure.).'
        key_labels:
          - db
        values:
          - cntr_value
        query: |
          SELECT rtrim(instance_name) AS db, cntr_value
          FROM sys.dm_os_performance_counters
          WHERE counter_name = 'Transactions/sec' AND instance_name <> '_Total'

      # mssql_os_sys_memory
      - metric_name: mssql_total_physical_memory_bytes
        type: gauge
        help: 'Total physical memory in bytes.'
        values: [total_physical_memory_bytes]
        query_ref: mssql_os_sys_memory
      - metric_name: mssql_available_physical_memory_bytes
        type: gauge
        help: 'Available physical memory in bytes.'
        values: [available_physical_memory_bytes]
        query_ref: mssql_os_sys_memory
      - metric_name: mssql_total_page_file_bytes
        type: gauge
        help: 'Total page file size in bytes.'
        values: [total_page_file_bytes]
        query_ref: mssql_os_sys_memory
      - metric_name: mssql_available_page_file_bytes
        type: gauge
        help: 'Available page file size in bytes.'
        values: [available_page_file_bytes]
        query_ref: mssql_os_sys_memory

      #
      # sql exporter
      #
      - metric_name: mssql_local_time_seconds
        type: gauge
        help: 'Local time in seconds since epoch (Unix time).'
        values: [unix_time]
        query: |
          SELECT DATEDIFF(second, '19700101', GETUTCDATE()) AS unix_time

      - metric_name: mssql_connections
        type: gauge
        help: 'Number of active connections.'
        key_labels:
          - db
        values: [count]
        query: |
          SELECT DB_NAME(sp.dbid) AS db, COUNT(sp.spid) AS count
          FROM sys.sysprocesses sp
          GROUP BY DB_NAME(sp.dbid)

      #
      # Collected from sys.dm_os_performance_counters
      #
      - metric_name: mssql_deadlocks
        type: counter
        help: 'Number of lock requests that resulted in a deadlock.'
        values: [cntr_value]
        query: |
          SELECT cntr_value
          FROM sys.dm_os_performance_counters WITH (NOLOCK)
          WHERE counter_name = 'Number of Deadlocks/sec' AND instance_name = '_Total'

      - metric_name: mssql_user_errors
        type: counter
        help: 'Number of user errors.'
        values: [cntr_value]
        query: |
          SELECT cntr_value
          FROM sys.dm_os_performance_counters WITH (NOLOCK)
          WHERE counter_name = 'Errors/sec' AND instance_name = 'User Errors'

      - metric_name: mssql_kill_connection_errors
        type: counter
        help: 'Number of severe errors that caused SQL Server to kill the connection.'
        values: [cntr_value]
        query: |
          SELECT cntr_value
          FROM sys.dm_os_performance_counters WITH (NOLOCK)
          WHERE counter_name = 'Errors/sec' AND instance_name = 'Kill Connection Errors'

      - metric_name: mssql_page_life_expectancy_seconds
        type: gauge
        help: 'The minimum number of seconds a page will stay in the buffer pool on this node without references.'
        values: [cntr_value]
        query: |
          SELECT top(1) cntr_value
          FROM sys.dm_os_performance_counters WITH (NOLOCK)
          WHERE counter_name = 'Page life expectancy'

      - metric_name: mssql_batch_requests
        type: counter
        help: 'Number of command batches received.'
        values: [cntr_value]
        query: |
          SELECT cntr_value
          FROM sys.dm_os_performance_counters WITH (NOLOCK)
          WHERE counter_name = 'Batch Requests/sec'

      - metric_name: mssql_log_growths
        type: counter
        help: 'Number of times the transaction log has been expanded, per database.'
        key_labels:
          - db
        values: [cntr_value]
        query: |
          SELECT rtrim(instance_name) AS db, cntr_value
          FROM sys.dm_os_performance_counters WITH (NOLOCK)
          WHERE counter_name = 'Log Growths' AND instance_name <> '_Total'

      - metric_name: mssql_buffer_cache_hit_ratio
        type: gauge
        help: 'Ratio of requests that hit the buffer cache'
        values: [cntr_value]
        query: |
          SELECT cntr_value
          FROM sys.dm_os_performance_counters
          WHERE [counter_name] = 'Buffer cache hit ratio'


      #
      # Collected from sys.dm_io_virtual_file_stats
      #
      - metric_name: mssql_io_stall_seconds
        type: counter
        help: 'Stall time in seconds per database and I/O operation.'
        key_labels:
          - db
        value_label: operation
        values:
          - read
          - write
        query_ref: mssql_io_stall
      - metric_name: mssql_io_stall_total_seconds
        type: counter
        help: 'Total stall time in seconds per database.'
        key_labels:
          - db
        values:
          - io_stall
        query_ref: mssql_io_stall

      #
      # Collected from sys.dm_os_process_memory
      #
      - metric_name: mssql_resident_memory_bytes
        type: gauge
        help: 'SQL Server resident memory size (AKA working set).'
        values: [resident_memory_bytes]
        query_ref: mssql_process_memory

      - metric_name: mssql_virtual_memory_bytes
        type: gauge
        help: 'SQL Server committed virtual memory size.'
        values: [virtual_memory_bytes]
        query_ref: mssql_process_memory

      - metric_name: mssql_memory_utilization_percentage
        type: gauge
        help: 'The percentage of committed memory that is in the working set.'
        values: [memory_utilization_percentage]
        query_ref: mssql_process_memory

      - metric_name: mssql_page_fault_count
        type: counter
        help: 'The number of page faults that were incurred by the SQL Server process.'
        values: [page_fault_count]
        query_ref: mssql_process_memory

      #
      # Collected from sys.dm_os_sys_memory
      #
      - metric_name: mssql_os_memory
        type: gauge
        help: 'OS physical memory, used and available.'
        value_label: 'state'
        values: [used, available]
        query: |
          SELECT
            (total_physical_memory_kb - available_physical_memory_kb) * 1024 AS used,
            available_physical_memory_kb * 1024 AS available
          FROM sys.dm_os_sys_memory

      - metric_name: mssql_os_page_file
        type: gauge
        help: 'OS page file, used and available.'
        value_label: 'state'
        values: [used, available]
        query: |
          SELECT
            (total_page_file_kb - available_page_file_kb) * 1024 AS used,
            available_page_file_kb * 1024 AS available
          FROM sys.dm_os_sys_memory

    queries:
      #
      # sql exporter
      #

      # Populates `mssql_io_stall` and `mssql_io_stall_total`
      - query_name: mssql_io_stall
        query: |
          SELECT
            cast(DB_Name(a.database_id) as varchar) AS [db],
            sum(io_stall_read_ms) / 1000.0 AS [read],
            sum(io_stall_write_ms) / 1000.0 AS [write],
            sum(io_stall) / 1000.0 AS io_stall
          FROM
            sys.dm_io_virtual_file_stats(null, null) a
          INNER JOIN sys.master_files b ON a.database_id = b.database_id AND a.file_id = b.file_id
          GROUP BY a.database_id

      # Populates `mssql_resident_memory_bytes`, `mssql_virtual_memory_bytes`, `mssql_memory_utilization_percentage` and
      # `mssql_page_fault_count`.
      - query_name: mssql_process_memory
        query: |
          SELECT
            physical_memory_in_use_kb * 1024 AS resident_memory_bytes,
            virtual_address_space_committed_kb * 1024 AS virtual_memory_bytes,
            memory_utilization_percentage,
            page_fault_count
          FROM sys.dm_os_process_memory

      #
      # prometheus-mssql-exporter
      #

      # Populates `mssql_page_read_total`, `mssql_page_write_total`, `mssql_page_life_expectancy`, `mssql_lazy_write_total`,
      - query_name: mssql_buffer_manager
        query: |
          SELECT
            [Page reads/sec] AS page_reads_sec,
            [Page writes/sec] AS page_writes_sec,
            [Page life expectancy] AS page_life_expectancy,
            [Lazy writes/sec] AS lazy_writes_sec,
            [Checkpoint pages/sec] AS checkpoint_pages_sec
          FROM
            (
              SELECT rtrim(counter_name) as counter_name, cntr_value
              FROM sys.dm_os_performance_counters
              WHERE counter_name in ('Page reads/sec', 'Page writes/sec', 'Page life expectancy', 'Lazy writes/sec', 'Checkpoint pages/sec')
              AND object_name = 'SQLServer:Buffer Manager'
            ) d
            PIVOT
            (
              MAX(cntr_value)
              FOR counter_name IN ([Page reads/sec], [Page writes/sec], [Page life expectancy], [Lazy writes/sec], [Checkpoint pages/sec])
            ) piv

      # Populates `mssql_total_physical_memory_kb`, `mssql_available_physical_memory_kb`, `mssql_total_page_file_kb`, `mssql_available_page_file_kb`
      - query_name: mssql_os_sys_memory
        query: |
          SELECT
            total_physical_memory_kb * 1024 AS total_physical_memory_bytes,
            available_physical_memory_kb * 1024 AS available_physical_memory_bytes,
            total_page_file_kb * 1024 AS total_page_file_bytes,
            available_page_file_kb * 1024 AS available_page_file_bytes
          FROM
            sys.dm_os_sys_memory
